<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-aFq/bzH65dt+w6FI2ooMVUpc+21e0SRygnTpmBvdBgSdnuTN7QbdgL+OapgHtvPp" crossorigin="anonymous">
</head>
<body>
<div class="container-fluid p-3">
    <table class="table table-striped table-bordered">
        <thead class="text-center">
        <tr>
            <th scope="col">ID</th>
            <th scope="col">Name</th>
            <th scope="col">Replica count</th>
            <th scope="col">Image</th>
            <th scope="col">Ports</th>
            <th scope="col">Memory(Used/Available)</th>
        </tr>
        </thead>
        <tbody id="table-body">
        </tbody>
    </table>
</div>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/js/bootstrap.min.js" integrity="sha384-heAjqF+bCxXpCWLa6Zhcp4fu20XoNIA98ecBC1YkdXhszjoejr5y9Q77hIrv8R9i" crossorigin="anonymous"></script>
<script>
    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) {
            return '0 Bytes';
        }
        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }

    const eventStream = new EventSource("/stream/services");
    eventStream.addEventListener("services", event => {
        let finalTable = "";
        for (let data of JSON.parse(event.data)) {
            let row = `
            <tr>
                <th scope="row" id="${data.ID}">${data.ID}</th>
                <td>${data.Name}</td>
                <td>
                    <span id="${data.ID}-replica-count">${data.Replicas}</span>
                    <input type="button" value="+" onclick="scaleUp(this, '${data.ID}')">
                    <input type="button" value="-" onclick="scaleDown(this, '${data.ID}')">
                </td>
                <td style="word-break: break-all">${data.Image}</td>
            `
            row += "<td>"
            for (let port of data.EndpointPorts) {
                row += `<i>${port}</i>`
            }
            row += "</td>"

            row += "<td>"
            let availableMem = data.MemInfo.available
            if (availableMem == 0) {
                availableMem = "unlimited"
            } else {
                availableMem = formatBytes(availableMem)
            }
            row += `${formatBytes(data.MemInfo.used)}/${availableMem}`
            row += "</td>"

            row += "</tr>"
            finalTable += row;
           }
        let tBody = document.getElementById("table-body")
        tBody.innerHTML = finalTable;

    });

    function scaleUp(element, serviceId){
        element.disabled = true
       fetch(`/${serviceId}/up`)
    }
    function scaleDown(element, serviceId) {
        console.log(element)
        element.disabled = true
        fetch(`/${serviceId}/down`)
    }
</script>

</body>
</html>
